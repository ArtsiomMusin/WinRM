module WinRM
  module Headers

    RESOURCE_URI_CMD =  { "#{NS_WSMAN_DMTF}:ResourceURI" => 'http://schemas.microsoft.com/wbem/wsman/1/windows/shell/cmd',
                          :attributes! => {"#{NS_WSMAN_DMTF}:ResourceURI" => {"#{NS_SOAP_ENV}:mustUnderstand" => true}}
                        }.freeze
    
    ACTIONS = { create:          'http://schemas.xmlsoap.org/ws/2004/09/transfer/Create',
      delete:          'http://schemas.xmlsoap.org/ws/2004/09/transfer/Delete',
      command:         'http://schemas.microsoft.com/wbem/wsman/1/windows/shell/Command',
      receive:         'http://schemas.microsoft.com/wbem/wsman/1/windows/shell/Receive',
      send:            'http://schemas.microsoft.com/wbem/wsman/1/windows/shell/Send',
      get:             'http://schemas.xmlsoap.org/ws/2004/09/transfer/Get',
      signal:          'http://schemas.microsoft.com/wbem/wsman/1/windows/shell/Signal',
      enumerate:       'http://schemas.xmlsoap.org/ws/2004/09/enumeration/Enumerate',
      enumerate_pull:  'http://schemas.xmlsoap.org/ws/2004/09/enumeration/Pull'

     }.freeze

    def get_action(action)
      { "#{NS_ADDRESSING}:Action" => ACTIONS[action],
                :attributes! => {"#{NS_ADDRESSING}:Action" => {"#{NS_SOAP_ENV}:mustUnderstand" => true}}
      }
    end

    
    # Builds a common set of headers used by all commands
    # @option opts [Integer] :max_env_size (153600) The largest message size that the client should expect
    # @option opts [String] :timeout (PT60S) The period, as an ISO8601 duration, in which the client expects to receive a fault or reponse from the server.
    # @option opts [locale] :locale (en-US) Specifies the language that the client requests (and sometimes requires) the response text to be translated into
    # @option opts [Sring] :uuid (Autogenerated) Specifies the UUID of the message. THIS SHOULD ONLY BE USED FOR TESTING
    # @raise [ArgumentError] if required options are not specified
    # @return [Hash] A Gyoku serializable hash
    def base_headers()
      defaults = { max_env_size: 512000, timeout: 'PT60S',locale: 'en-US' }
      opts = defaults.merge(@opts)

      [:endpoint].each do |a|
        raise ArgumentError, "#{a} is a required argument" unless opts[a]
      end

      command_uuid = opts[:command_uuid] || UUIDTools::UUID.random_create.to_s.upcase

      { "#{NS_ADDRESSING}:To" => opts[:endpoint],
        "#{NS_ADDRESSING}:ReplyTo" => {
        "#{NS_ADDRESSING}:Address" => 'http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous',
          :attributes! => {"#{NS_ADDRESSING}:Address" => {"#{NS_SOAP_ENV}:mustUnderstand" => true}}},
        "#{NS_WSMAN_DMTF}:MaxEnvelopeSize" => opts[:mav_env_size],
        "#{NS_ADDRESSING}:MessageID" => "uuid:#{command_uuid}",
        "#{NS_WSMAN_DMTF}:Locale/" => '',
        "#{NS_WSMAN_MSFT}:DataLocale/" => '',
        #"#{NS_WSMAN_CONF}:MaxTimeoutms" => 600, #TODO: research this a bit http://msdn.microsoft.com/en-us/library/cc251561(v=PROT.13).aspx
        "#{NS_WSMAN_DMTF}:OperationTimeout" => opts[:timeout],
        "#{NS_WSMAN_DMTF}:MaxEnvelopeSize" => {
            "@#{NS_SOAP_ENV}:mustUnderstand" => true ,
            :content! => opts[:max_env_size].to_s},
          "#{NS_WSMAN_DMTF}:Locale/" => {'@xml:lang' => opts[:locale], "@#{NS_SOAP_ENV}:mustUnderstand" => false},
          "#{NS_WSMAN_MSFT}:DataLocale/" => {'@xml:lang' => opts[:locale], "@#{NS_SOAP_ENV}:mustUnderstand" => false}
  
      }
    end

    # merge the various header hashes and make sure we carry all of the attributes
    #   through instead of overwriting them.
    # @param [Hash] headers N Number of hashes to merge together
    # @api private
    def merge_headers(*headers)
      hdr = {}
      headers.each do |h|
        hdr.merge!(h) do |k,v1,v2|
          v1.merge!(v2) if k == :attributes!
        end
      end
      hdr
    end

    # Builds a shell selection header
    def selector_shell_id(shell_id)
      {"#{NS_WSMAN_DMTF}:SelectorSet" => 
        {"#{NS_WSMAN_DMTF}:Selector" => shell_id, :attributes! => {"#{NS_WSMAN_DMTF}:Selector" => {'Name' => 'ShellId'}}}
      }
    end
  end
end
